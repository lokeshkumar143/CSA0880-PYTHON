ASSIGNMENT 4.1

class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        def backtrack(first):
            if first == n:
                permutations.append(nums[:])
            else:
                used = set()
                for i in range(first, n):
                    if nums[i] not in used:
                        used.add(nums[i])
                        nums[first], nums[i] = nums[i], nums[first]
                        backtrack(first + 1)
                        nums[first], nums[i] = nums[i], nums[first]
        n = len(nums)
        permutations = []
        backtrack(0)
        return permutations

ASSIGNMENT 4.2

class Solution:
    def fizzBuzz(self, n: int) -> List[str]:
        output = []
        for i in range(1, n+1):
            if i % 3 == 0 and i % 5 == 0:
                output.append("FizzBuzz")
            elif i % 3 == 0:
                output.append("Fizz")
            elif i % 5 == 0:
                output.append("Buzz")
            else:
                output.append(str(i))
        return output

ASSIGNMENT 4.3

n = int(input("Enter the number of elements in list: "))
lst = []
for i in range(n):
    lst.append(int(input(f"Enter element{i+1}: ")))

lst = list(set(lst))
print("Non-duplicate items:", lst)

ASSIGNMENT 4.4

num = int(input("Enter a number: "))
num_str = str(num)
lsb = num_str[-1]
msb = num_str[0]
print("LSB:", lsb)
print("MSB:", msb)

ASSIGNMENT 4.5

def searchRange(nums, target):
    left = 0
    right = len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    start = left
    left = 0
    right = len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] <= target:
            left = mid + 1
        else:
            right = mid - 1
    end = right
    if start <= end:
        return [start, end]
    else:
        return [-1, -1]
nums = [5,7,7,8,8,10]
target = 8
print(searchRange(nums, target))
